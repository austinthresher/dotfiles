# TODO: Split interactive stuff into a separate file, especially
# the stuff that I might rely on in scripts, like pyenv/luarocks/paths/etc

# The first part of this file runs both interactively and non-interactively
# =========================================================================

# Detect when we're running in Windows under a Unix-like shell
# TODO: git bash?
if [ ! -z "$WSL_DISTRO_NAME" ]; then
    export WINDOWS=WSL
elif [ "$OSTYPE" == cygwin ]; then
    export WINDOWS=Cygwin
elif [ "$OSTYPE" == msys ]; then
    export WINDOWS=MSYS
fi

# Assume there's an X server running if we're on Windows
if [ -n "$WINDOWS" ] && [ -z "$DISPLAY" ]; then
    export DISPLAY=0:0
fi

# Non-login shells won't have this from .profile
pathadd() {
    if [[ ! $PATH == *$1* ]]; then
        export PATH="$1:$PATH"
    fi
}

unset -f command_not_found_handle
export HISTCONTROL=ignoreboth:erasedups

# Fix ugly dircolors, the default blue on green is impossible to read.
export LS_COLORS+=':ow=01;92;100'
export EDITOR=vi
export VISUAL=vi
export PAGER='less -R'
export SCREENDIR="$HOME/.screen"
[ ! -d "$SCREENDIR" ] && mkdir "$SCREENDIR" && chmod 700 "$SCREENDIR"

export PYENV_ROOT="$HOME/.pyenv"
pathadd "$PYENV_ROOT/bin"
if [[ -d $PYENV_ROOT ]]; then
    # Set default version if it isn't already configured. Setting it
    # here has the lowest priority compared to local .python-version
    # files or PYENV_VERSION.
    [[ -e $PYENV_ROOT/version ]] || echo "3.12" > "$PYENV_ROOT/version"
fi

is_executable () {
    command -v "$@" &> /dev/null
}

# Lazy load everything that tells you to add `eval $(foo)` to your bashrc.
# The second argument is a string of setup command(s) that will be passed to
# `eval` the first time the given name is invoked. Nested eval works, so this
# can be anything at all.
lazy_load() {
    local cmd_name="$1"; shift
    local setup_cmd="$1"; shift
    # Create a function that unsets itself, runs the setup command,
    # and then calls the name it shadowed with the original arguments.
    local func="$cmd_name() { "
    # Uncomment these for debugging
    # func+="echo \"lazy loading $cmd_name\" ;"
    # func+="echo 'executing: $setup_cmd' ;"
    func+="unset -f $cmd_name ; "
    # Place the given commands directly in the body of the function
    func+="$setup_cmd ; "
    func+="$cmd_name \"\$@\" ; "
    func+="}"
    eval "$func"
}

# Don't overwrite pyenv if it's already installed the function
if [[ $(type -t pyenv) != function ]] ; then
    # Making this a function was a lot easier than escaping everything
    setup_pyenv() {
        # Default location for pyenv
        if is_executable pyenv; then
            eval "$(pyenv init - bash)"
            if [[ $(pyenv commands) == *virtualenv-init* ]]; then
                eval "$(pyenv virtualenv-init - bash)"
            fi
        fi
    }
    lazy_load pyenv setup_pyenv
fi

lazy_load pipx 'export PIPX_DEFAULT_PYTHON="$(pyenv which python || which python3)"'

# The rest of this file is skipped if not running interactively
# =============================================================
case $- in
    *i*) ;; # Interactive session, continue
    *) # Non interactive, source local config and return
    [[ -e ~/.bashrc_local ]] && source ~/.bashrc_local
    return ;;
esac

# Ignore legacy scroll lock on <C-S> and <C-Q>
stty -ixon

# Report the user, hostname, and terse machine info when opening a new
# interactive shell
# These should always exist if our shell is actually bash
distro="$OSTYPE $HOSTTYPE"
if command -v lsb_release &> /dev/null; then
    distro=$(lsb_release -sd)
elif command -v uname &> /dev/null; then
    distro=$(uname -sr)
fi
# Remove quotes that appear on some systems
distro=$(echo "$distro" | tr -d '"')
echo -e " \e[92m$USER @ $(hostname)  \e[90m $distro${WINDOWS:+ $WINDOWS} \e[0m"
unset distro

alias rgrep='grep -Iirn'
alias more='less'
alias gdb='gdb -q'
alias preview='feh --scale -d . &'

# I never remember this
alias rsync-remote='rsync -azvPh'
alias rsync-local='rsync -avPh'

# Pipe into this to prevent really long lines from taking over shell output.
alias trunc="cut -b 1-120"

# View terminal escape sequences for keystrokes
alias keys='echo "Ctrl-D on a new line to end input" ; od -t x1 -t u1'

# I never remember xxd
alias hex='xxd -g 1'

if [[ $OSTYPE == *darwin* ]]; then
    alias ls='ls -F'
    export BASH_SILENCE_DEPRECATION_WARNING=1
elif [ -z "$WINDOWS" ]; then
    alias ls="ls -p -N --color=auto -I '*System Volume Information*' -I '*RECYCLE.BIN*' -I lost+found"
else
    alias ls="ls -F --color=auto"
fi

alias tmux='tmux -u'
alias usermount="udisksctl"

alias pe=pyenv
alias venv='pyenv activate'
alias activate='pyenv activate'
alias deactivate='pyenv deactivate'

# NOTE: Takes the repo name before any flags. Extracting the last argument
# was a lot more of a headache than just swapping the order. Because of this,
# it will always use the repo name as the target directory.
ghclone() {
    local repo="$1"; shift
    git clone "$@" "https://github.com/$repo"
}

# View the history of a specific file in a repo, including renames
githist() {
    local git_filename="$1"; shift
    git log --follow -p -U1 --oneline "$@" -- "$git_filename"
}

# View the history of the given function in the given filename
gitfn() {
    local git_funcname="$1"; shift
    local git_filename="$1"; shift
    git log -U1 -L --oneline ":${git_funcname}:${git_filename}" "$@"
}

# These scripts are in my dotfiles.
# They pick an appropriate editor based on what's installed.
export EDITOR=edit-tty
export VISUAL=edit

alias emc=edit
# TODO: Use an alternate stripped down config for this?
alias em=edit-tty

# I often want easy access to view / edit scripts in $PATH
wcat() { which "$1" && cat $(which "$1") ; }
wedit() { which "$1" && edit $(which "$1") ; }
wedit-tty() { which "$1" && edit-tty $(which "$1") ; }


# The colon at the end indicates to prepend to the existing manpath
export MANPATH="$HOME/.local/share/man:"

# apt installs bat as batcat, make a symlink so that it can be used as bat
if is_executable batcat && ! is_executable bat; then
    ln -s "$(which batcat)" "$HOME/.local/bin/bat"
fi

# Use bat as a cat replacement and add help command for pretty-printing usage
if is_executable bat; then
    alias cat='bat' # bat says it's smart enough to not break this
    help() {
        "$@" --help 2>&1 | bat --plain --language=help
    }
else
    # This is still useful without syntax highlighting
    help() {
        "$@" --help 2>&1 | less -RF
    }
fi

is_executable batman && lazy_load man 'eval "$(batman --export-env)"'

# Same as bat, the name fd conflicts with another package in apt
if is_executable fdfind && ! is_executable fd; then
    ln -s "$(which fdfind)" "$HOME/.local/bin/fd"
fi

if is_executable glow; then
    alias glow='glow --mouse --pager'
    # I'll probably type "md" to try and find a Markdown viewer
    alias mdv=glow
fi

# Programs that don't have their own readline integration by default
if is_executable rlwrap ; then
    is_executable sbcl && alias sbcl='rlwrap sbcl'     # Steel Bank Common Lisp
    is_executable csi && alias csi='rlwrap csi'        # Chicken Scheme
    # Newer Lua versions do use readline, but I've probably symlinked to luajit
    is_executable lua && alias lua='rlwrap lua'
fi

is_executable gio && alias trash='gio trash'
is_executable sshfs && alias sshfs='sshfs -o reconnect,ServerAliveInterval=5'
# Alternative: without reconnect, just unmounts when the connection times out.
# is_executable sshfs && alias sshfs='sshfs -o ServerAliveInterval=5'

# Enable bash completion if the files are present
# NOTE: Remember, specific programs that give problems can be removed
# with `complete -r <program-name>`
if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

if [[ -e ~/.complete_alias ]]; then
    source ~/.complete_alias
    complete -F _complete_alias "${!BASH_ALIASES[@]}"
fi

prompt_char=">"
if [[ $TERM != dumb ]]; then
    prompt_char="â€º"
    prompt_start="\[\e[32m\]"
    prompt_end="\[\e[0m\]"
    # Emacs term doesn't know what to do with xterm's title escape sequences
    if [[ ! $TERM == *eterm* ]]; then
        title="\[\e]0;\w\a\]"
    fi
    dark="\[\e[90m\]"
    light="\[\e[37m\]"
    dim="\[\e[2m\]"
    reset="\[\e[0m\]"
fi

# Only show hostname when we're in an SSH session
if [[ -n $SSH_TTY ]] ; then
    prompt_char="$prompt_char \h"
fi

export PS1="$title$prompt_start$prompt_char$prompt_end $dark\w$light$dim \$ $reset"
unset -v prompt_start title dark light dim reset

# This was only sourced above if the shell was non-interactive, do it now
[[ -e ~/.bashrc_local ]] && source ~/.bashrc_local
