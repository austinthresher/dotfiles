# TODO: Split interactive stuff into a separate file

# Detect when we're running in Windows under a Unix-like shell
# todo: git bash?
if [ ! -z "$WSL_DISTRO_NAME" ]; then
    export WINDOWS=WSL
elif [ "$OSTYPE" == cygwin ]; then
    export WINDOWS=Cygwin
elif [ "$OSTYPE" == msys ]; then
    export WINDOWS=MSYS
fi

# Assume there's an X server running if we're on Windows
if [ -n "$WINDOWS" ] && [ -z "$DISPLAY" ]; then
    export DISPLAY=0:0
fi

# The first part of this file runs both interactively and non-interactively
# =========================================================================
unset -f command_not_found_handle
export HISTCONTROL=ignoreboth:erasedups

# Fix ugly dircolors, the default blue on green is impossible to read.
export LS_COLORS+=':ow=01;92;100'
export EDITOR=vi
export VISUAL=vi
export PAGER='less -R'
export SCREENDIR="$HOME/.screen"
[ ! -d "$SCREENDIR" ] && mkdir "$SCREENDIR" && chmod 700 "$SCREENDIR"

# The rest of this file is skipped if not running interactively
# =============================================================
case $- in
    *i*) ;; # Interactive session
    *)
    [[ -e ~/.bashrc_local ]] && source ~/.bashrc_local
    return ;; # Non interactive
esac

# Report the user, hostname, and terse machine info when opening a new
# interactive shell
# These should always exist if our shell is actually bash
distro="$OSTYPE $HOSTTYPE"
if command -v lsb_release &> /dev/null; then
    distro=$(lsb_release -sd)
elif command -v uname &> /dev/null; then
    distro=$(uname -sr)
fi
# Remove quotes that appear on some systems
distro=$(echo "$distro" | tr -d '"')

# Version with vertical dividers
# SEP="\e[90m│\e[0m"
# echo -e "$SEP \e[32m$USER @ $(hostname) $SEP \e[37m$distro${WINDOWS:+ $WINDOWS}\e[0m $SEP"

# No dividers
echo -e " \e[92m$USER @ $(hostname)  \e[90m $distro${WINDOWS:+ $WINDOWS} \e[0m"
unset distro

# Ignore legacy scroll lock on <C-S> and <C-Q>
stty -ixon

alias rgrep='grep -Iirn'
alias more='less'
alias gdb='gdb -q'
alias preview='feh --scale -d . &'

# Pipe into this to prevent really long lines from taking over shell output.
alias trunc="cut -b 1-120"

# View terminal escape sequences for keystrokes
alias keys='echo "Ctrl-D on a new line to end input" ; od -t x1 -t u1'

# I never remember xxd
alias hex='xxd -g 1'

if [[ $OSTYPE == *darwin* ]]; then
    alias ls='ls -F'
    export BASH_SILENCE_DEPRECATION_WARNING=1
elif [ -z "$WINDOWS" ]; then
    alias ls="ls -p -N --color=auto -I '*System Volume Information*' -I '*RECYCLE.BIN*' -I lost+found"
else
    alias ls="ls -F --color=auto"
fi

alias tmux='tmux -u'
alias usermount="udisksctl"

# NOTE: Takes the repo name before any flags. Extracting the last argument
# was a lot more of a headache than just swapping the order. Because of this,
# it will always use the repo name as the target directory.
ghclone() {
    local repo="$1"; shift
    git clone "$@" "https://github.com/$repo"
}

# View the history of a specific file in a repo, including renames
githist() {
    local git_filename="$1"; shift
    git log --follow -p -U1 --oneline "$@" -- "$git_filename"
}

# View the history of the given function in the given filename
gitfn() {
    local git_funcname="$1"; shift
    local git_filename="$1"; shift
    git log -U1 -L --oneline ":${git_funcname}:${git_filename}" "$@"
}

is_executable () {
    command -v "$@" &> /dev/null
}

# Allow launching emacsclient directly without having to start a daemon first
is_executable emacsclient && alias emc='emacsclient-wrapper'
# Terminal emacs for quick edits, no client connection
# TODO: Use an alternate stripped down config for this?
is_executable emacs && alias em='emacs -nw'

# These scripts are in my dotfiles.
# They pick an appropriate editor based on what's installed.
export EDITOR=edit-tty
export VISUAL=edit

# The colon at the end indicates to prepend to the existing manpath
export MANPATH="$HOME/.local/share/man:"

# apt installs bat as batcat, make a symlink so that it can be used as bat
if is_executable batcat && ! is_executable bat; then
    ln -s "$(which batcat)" "$HOME/.local/bin/bat"
fi

# Use bat as a cat replacement and add help command for pretty-printing usage
if is_executable bat; then
    bathelp() {
        bat --plain --language=help
    }
    help() {
      "$@" --help 2>&1 | bathelp
    }
    alias cat='bat' # bat says it's smart enough to not break this
fi

is_executable batman && eval "$(batman --export-env)"

# Same as bat, the name fd conflicts with another package in apt
if is_executable fdfind && ! is_executable fd; then
    ln -s "$(which fdfind)" "$HOME/.local/bin/fd"
fi

if is_executable glow; then
    alias glow='glow --mouse --pager'
    # I'll probably type "md" to try and find a Markdown viewer
    alias mdv=glow
fi

is_executable rlwrap && is_executable sbcl && alias sbcl='rlwrap sbcl'
is_executable gio && alias trash='gio trash'
is_executable sshfs && alias sshfs='sshfs -o reconnect,ServerAliveInterval=5'
# Alternative: without reconnect, just unmounts when the connection times out.
# is_executable sshfs && alias sshfs='sshfs -o ServerAliveInterval=5'

# I never remember this
alias rsync-remote='rsync -azvPh'
alias rsync-local='rsync -avPh'

# TODO: Figure out where to put this and other config so that it applies to all
# shell sessions, (specifically, noninteractive ones like launching the emacs
# daemon or over ssh). Maybe just wrap this in a "pyenv" script and throw it in
# PATH so that it sets up the environment then forwards to the real pyenv.
export PYENV_VERSION=3.13
if ! is_executable pyenv; then
    if [[ -d $HOME/.pyenv ]]; then
        export PYENV_ROOT="$HOME/.pyenv"
        if [[ ! "$PATH" == *"$PYENV_ROOT"* ]]; then
            export PATH="$PYENV_ROOT/bin:$PATH"
        fi
    fi
fi

if is_executable pyenv; then
    eval "$(pyenv init - bash)"
    export PIPX_DEFAULT_PYTHON="$(pyenv which python)"
fi

# Enable bash completion if the files are present
if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

prompt_char=">"
if [ "$TERM" != dumb ]; then
    prompt_char="›" # #   #»
    prompt_start="\[\e[32m\]$PROMPT_CHAR \[\e[0m\]"
    title="\[\e]0;\w\a\]"
    dark="\[\e[90m\]"
    light="\[\e[37m\]"
    dim="\[\e[2m\]"
    reset="\[\e[0m\]"
fi
export PS1="$title$prompt_start$dark\w$light$dim \$ $reset"
unset -v prompt_char prompt_start title dark light dim reset

[[ -e ~/.bashrc_local ]] && source ~/.bashrc_local
