;; -*- lexical-binding: t -*-

(my/user-load "bootstrap-elpaca.el")
(add-hook 'elpaca-after-init-hook (apply-partially #'my/user-load "custom.el"))
(setq elpaca-queue-limit 8)

;;;; THEMES BEGIN

(when nil
  (elpaca sublime-themes)
  (elpaca standard-themes)
  (elpaca alect-themes)
  (elpaca modus-themes)
  (elpaca hyperstitional-themes)
  (elpaca app-monochrome-themes)
  (elpaca svg-mode-line-themes)
  (elpaca ef-themes)
  (elpaca almost-mono-themes)
  (elpaca sculpture-themes)
  (elpaca majapahit-themes)
  (elpaca farmhouse-themes)
  (elpaca avk-emacs-themes)
  (elpaca stimmung-themes)
  (elpaca kanagawa-themes)
  (elpaca humanoid-themes)
  (elpaca flexoki-themes)
  (elpaca sketch-themes)
  (elpaca shanty-themes)
  (elpaca punpun-themes)
  (elpaca kaolin-themes)
  (elpaca hippo-themes)
  (elpaca eziam-themes)
  (elpaca lab-themes)
  (elpaca abyss-theme)
  (elpaca acme-theme)
  (elpaca adwaita-dark-theme)
  (elpaca afternoon-theme)
  (elpaca ahungry-theme)
  (elpaca aircon-theme)
  (elpaca ample-theme)
  (elpaca ample-zen-theme)
  (elpaca ancient-one-dark-theme)
  (elpaca anti-zenburn-theme)
  (elpaca apropospriate-theme)
  (elpaca arjen-grey-theme)
  (elpaca atom-dark-theme)
  (elpaca atom-one-dark-theme)
  (elpaca autumn-light-theme)
  (elpaca ayu-theme)
  (elpaca badger-theme)
  (elpaca badwolf-theme)
  (elpaca base16-theme)
  (elpaca basic-theme)
  (elpaca berrys-theme)
  (elpaca birds-of-paradise-plus-theme)
  (elpaca blackboard-theme)
  (elpaca bliss-theme)
  (elpaca borland-blue-theme)
  (elpaca boron-theme)
  (elpaca brutalist-theme)
  (elpaca bubbleberry-theme)
  (elpaca busybee-theme)
  (elpaca calmer-forest-theme)
  (elpaca caroline-theme)
  (elpaca cherry-blossom-theme)
  (elpaca chocolate-theme)
  (elpaca chyla-dark-theme)
  (elpaca chyla-theme)
  (elpaca cloud-theme)
  (elpaca clues-theme)
  (elpaca codex-theme)
  (elpaca colonoscopy-theme)
  (elpaca color-theme-approximate)
  (elpaca color-theme-modern)
  (elpaca color-theme-sanityinc-solarized)
  (elpaca color-theme-sanityinc-tomorrow)
  (elpaca color-theme-x)
  (elpaca commentary-theme)
  (elpaca constant-theme)
  (elpaca creamsody-theme)
  (elpaca curry-on-theme)
  (elpaca cyanometric-theme)
  (elpaca cybercafe-theme)
  (elpaca cyberpunk-2019-theme)
  (elpaca cyberpunk-theme)
  (elpaca dakrone-light-theme)
  (elpaca dakrone-theme)
  (elpaca danneskjold-theme)
  (elpaca darcula-theme)
  (elpaca dark-krystal-theme)
  (elpaca dark-mint-theme)
  (elpaca darkmine-theme)
  (elpaca darkokai-theme)
  (elpaca darktooth-theme)
  (elpaca display-theme)
  (elpaca distinguished-theme)
  (elpaca django-theme)
  (elpaca dream-theme)
  (elpaca eclipse-theme)
  (elpaca eink-theme)
  (elpaca elune-theme)
  (elpaca esmond-theme)
  (elpaca espresso-theme)
  (elpaca evangelion-theme)
  (elpaca exotica-theme)
  (elpaca faff-theme)
  (elpaca fantom-theme)
  (elpaca firecode-theme)
  (elpaca flatfluc-theme)
  (elpaca flatland-black-theme)
  (elpaca flatland-theme)
  (elpaca flatui-dark-theme)
  (elpaca flatui-theme)
  (elpaca fleetish-theme)
  (elpaca foggy-night-theme)
  (elpaca forest-blue-theme)
  (elpaca gandalf-theme)
  (elpaca girly-notebook-theme)
  (elpaca github-dark-vscode-theme)
  (elpaca glass-tty-theme)
  (elpaca goose-theme)
  (elpaca gotham-theme)
  (elpaca grandshell-theme)
  (elpaca graphene-meta-theme)
  (elpaca grayscale-theme)
  (elpaca green-is-the-new-black-theme)
  (elpaca green-phosphor-theme)
  (elpaca green-screen-theme)
  (elpaca grey-paper-theme)
  (elpaca greymatters-theme)
  (elpaca gruber-darker-theme)
  (elpaca gruvbox-theme)
  (elpaca habamax-theme)
  (elpaca haki-theme)
  (elpaca halloweenie-theme)
  (elpaca hamburg-theme)
  (elpaca hc-zenburn-theme)
  (elpaca helix-theme)
  (elpaca hemera-theme)
  (elpaca hemisu-theme)
  (elpaca heroku-theme)
  (elpaca hima-theme)
  (elpaca horizon-theme)
  (elpaca hybrid-reverse-theme)
  (elpaca hydandata-light-theme)
  (elpaca iceberg-theme)
  (elpaca idea-darkula-theme)
  (elpaca immaterial-theme)
  (elpaca inkpot-theme)
  (elpaca intellij-theme)
  (elpaca inverse-acme-theme)
  (elpaca iodine-theme)
  (elpaca iosevka-theme)
  (elpaca ir-black-theme)
  (elpaca jazz-theme)
  (elpaca jbeans-theme)
  (elpaca jetbrains-darcula-theme)
  (elpaca klere-theme)
  (elpaca kooten-theme)
  (elpaca kosmos-theme)
  (elpaca kuronami-theme)
  (elpaca labburn-theme)
  (elpaca laguna-theme)
  (elpaca lavender-theme)
  (elpaca lavenderless-theme)
  (elpaca leuven-theme)
  (elpaca light-soap-theme)
  (elpaca liso-theme)
  (elpaca lush-theme)
  (elpaca madhat2r-theme)
  (elpaca mandm-theme)
  (elpaca material-theme)
  (elpaca mbo70s-theme)
  (elpaca melancholy-theme)
  (elpaca mellow-theme)
  (elpaca metalheart-theme)
  (elpaca mindre-theme)
  (elpaca minimal-theme)
  (elpaca minsk-theme)
  (elpaca moe-theme)
  (elpaca molokai-theme)
  (elpaca monochrome-theme)
  (elpaca monokai-alt-theme)
  (elpaca monokai-pro-theme)
  (elpaca monokai-theme)
  (elpaca monotropic-theme)
  (elpaca mood-one-theme)
  (elpaca morgentau-theme)
  (elpaca morrowind-theme)
  (elpaca mustang-theme)
  (elpaca mustard-theme)
  (elpaca naga-theme)
  (elpaca nano-theme)
  (elpaca naquadah-theme)
  (elpaca naysayer-theme)
  (elpaca nezburn-theme)
  (elpaca night-owl-theme)
  (elpaca nimbus-theme)
  (elpaca no-clown-fiesta-theme)
  (elpaca noctilux-theme)
  (elpaca nofrils-acme-theme)
  (elpaca nord-theme)
  (elpaca nordic-night-theme)
  (elpaca nordless-theme)
  (elpaca northcode-theme)
  (elpaca nothing-theme)
  (elpaca notink-theme)
  (elpaca nova-theme)
  (elpaca nyx-theme)
  (elpaca oblivion-theme)
  (elpaca obsidian-theme)
  (elpaca occidental-theme)
  (elpaca oceanic-theme)
  (elpaca oldlace-theme)
  (elpaca orangey-bits-theme)
  (elpaca org-beautify-theme)
  (elpaca organic-green-theme)
  (elpaca overcast-theme)
  (elpaca paganini-theme)
  (elpaca panda-theme)
  (elpaca paper-theme)
  (elpaca parchment-theme)
  (elpaca pastelmac-theme)
  (elpaca peacock-theme)
  (elpaca phoenix-dark-mono-theme)
  (elpaca phoenix-dark-pink-theme)
  (elpaca plain-theme)
  (elpaca plan9-theme)
  (elpaca planet-theme)
  (elpaca poet-theme)
  (elpaca prassee-theme)
  (elpaca professional-theme)
  (elpaca pumpkin-spice-theme)
  (elpaca purp-theme)
  (elpaca purple-haze-theme)
  (elpaca qtcreator-theme)
  (elpaca quasi-monochrome-theme)
  (elpaca railscasts-reloaded-theme)
  (elpaca railscasts-theme)
  (elpaca rand-theme)
  (elpaca rebecca-theme)
  (elpaca remember-last-theme)
  (elpaca reverse-theme)
  (elpaca reykjavik-theme)
  (elpaca rimero-theme)
  (elpaca sakura-theme)
  (elpaca seoul256-theme)
  (elpaca seti-theme)
  (elpaca sexy-monochrome-theme)
  (elpaca shades-of-purple-theme)
  (elpaca silkworm-theme)
  (elpaca simplicity-theme)
  (elpaca slime-theme)
  (elpaca smyx-theme)
  (elpaca snazzy-theme)
  (elpaca soft-charcoal-theme)
  (elpaca soft-morning-theme)
  (elpaca soft-stone-theme)
  (elpaca solarized-theme)
  (elpaca solo-jazz-theme)
  (elpaca soothe-theme)
  (elpaca sorcery-theme)
  (elpaca soria-theme)
  (elpaca sourcerer-theme)
  (elpaca spacegray-theme)
  (elpaca srcery-theme)
  (elpaca starlit-theme)
  (elpaca subatomic-theme)
  (elpaca subatomic256-theme)
  (elpaca sunburn-theme)
  (elpaca sunny-day-theme)
  (elpaca suscolors-theme)
  (elpaca sweet-theme)
  (elpaca tango-2-theme)
  (elpaca tango-plus-theme)
  (elpaca tangonov-theme)
  (elpaca tangotango-theme)
  (elpaca tao-theme)
  (elpaca tardis-theme)
  (elpaca termbright-theme)
  (elpaca the-matrix-theme)
  (elpaca timu-caribbean-theme)
  (elpaca timu-macos-theme)
  (elpaca timu-rouge-theme)
  (elpaca timu-spacegrey-theme)
  (elpaca tok-theme)
  (elpaca tommyh-theme)
  (elpaca tomorrow-night-deepblue-theme)
  (elpaca toxi-theme)
  (elpaca tramp-theme)
  (elpaca tron-legacy-theme)
  (elpaca twilight-anti-bright-theme)
  (elpaca twilight-bright-theme)
  (elpaca twilight-theme)
  (elpaca ubuntu-theme)
  (elpaca ujelly-theme)
  (elpaca undersea-theme)
  (elpaca underwater-theme)
  (elpaca unobtrusive-magit-theme)
  (elpaca unspecified-theme)
  (elpaca uwu-theme)
  (elpaca vampyricdark-theme)
  (elpaca vegetative-theme)
  (elpaca vs-dark-theme)
  (elpaca vs-light-theme)
  (elpaca vscdark-theme)
  (elpaca vscode-dark-plus-theme)
  (elpaca waher-theme)
  (elpaca warm-night-theme)
  (elpaca weyland-yutani-theme)
  (elpaca white-sand-theme)
  (elpaca white-theme)
  (elpaca wildcharm-light-theme)
  (elpaca wildcharm-theme)
  (elpaca xresources-theme)
  (elpaca yabaki-theme)
  (elpaca yoshi-theme)
  (elpaca zen-and-art-theme)
  (elpaca zenburn-theme)
  (elpaca zeno-theme)
  (elpaca zerodark-theme)
  )

;;;; THEMES END


;; TODO: Move theme override stuff to theme-init.el
(when nil
  (elpaca sublime-themes
    (load-theme 'mccarthy t)
    (set-face-attribute 'default nil :foreground "#444")
    (set-face-attribute 'font-lock-builtin-face nil :foreground "#111")
    (set-face-attribute 'font-lock-string-face nil :foreground "#2c6415")
    (set-face-attribute 'font-lock-comment-face nil :foreground "#888"
                        :inherit '(my/default-light))
    (set-face-attribute 'font-lock-comment-delimiter-face nil :foreground "#888"
                        :inherit '(my/default-light))
    (set-face-attribute 'font-lock-doc-face nil :inherit '(my/default-light))
    (set-face-attribute 'show-paren-match nil
                        :box '(:line-width (-1 . -1))
                        :weight 'black
                        :background "white")
    (set-face-attribute 'show-paren-mismatch nil
                        :foreground "white"
                        :background "IndianRed4"
                        :inverse-video nil)
    (set-face-attribute 'trailing-whitespace nil
                        :background "gainsboro")
    (set-face-attribute 'isearch-fail nil :underline "red"
                        :foreground "red3" :background 'unspecified)
    (set-face-attribute 'highlight nil :background "LightBlue1")
    (set-face-attribute 'region nil :background "LightBlue1")
    (face-spec-set 'hl-line '((t (:background "LightBlue1" :underline t :extend t))))
    (set-face-attribute 'hl-line nil :background "LightBlue1")
    (set-face-attribute 'mode-line nil :inherit '(variable-pitch))
    (set-face-attribute 'mode-line-inactive nil :inherit '(variable-pitch))
    (face-spec-set 'whitespace-tab '((t (:foreground "gray80" :background unspecified))))
    (let ((bg "#f6f7f8")
          (inactive-bg "#c6c7c8")
          (line-bg "#e6e7e8")
          (h 110))
      (face-spec-set 'window-divider-first-pixel `((t (:foreground ,bg))))
      (face-spec-set 'window-divider-last-pixel `((t (:foreground ,bg))))
      (set-face-attribute 'tab-line-tab nil :background bg :box 'unspecified :height h
                          :underline `(:color ,bg :position 0))
      (set-face-attribute 'tab-line-tab-current nil :foreground "black" :background bg
                          :box 'unspecified :height h :underline `(:color ,bg :position 0))
      (set-face-attribute 'tab-line-highlight nil :box 'unspecified :underline t :height h
                          :background 'unspecified :foreground 'unspecified :inherit nil)
      (set-face-attribute 'tab-line-tab-modified nil :weight 'bold :foreground 'unspecified :height h)
      (set-face-attribute 'tab-line-tab-inactive nil :background inactive-bg :height h
                          :underline `(:color ,inactive-bg :position 0))
      (set-face-attribute 'tab-line nil :background line-bg :underline `(:color ,inactive-bg :position 0)))
    )
  )

(elpaca doom-modeline
  (column-number-mode)
  (line-number-mode)
  (setq doom-modeline-buffer-file-name-style 'relative-from-project
        doom-modeline-buffer-encoding 'nondefault
        doom-modeline-icon nil
        doom-modeline-highlight-modified-buffer-name t
        doom-modeline-minor-modes t)
  (doom-modeline-mode)
  (dolist (face (list 'doom-modeline-buffer-file 'doom-modeline-project-dir
                      'doom-modeline-project-root-dir 'doom-modeline-project-parent-dir))
    (set-face-attribute face nil :inherit '(variable-pitch)))
  (set-face-attribute 'doom-modeline-bar nil
                      :inherit '(mode-line-active)
                      :foreground 'unspecified :background 'unspecified)
  (set-face-attribute 'doom-modeline-bar-inactive nil
                      :inherit '(mode-line-inactive)
                      :foreground 'unspecified :background 'unspecified)
  (set-face-attribute 'doom-modeline-buffer-minor-mode nil
                      :foreground "grey95" :inherit '())
  (set-face-attribute 'doom-modeline-buffer-modified nil
                      :foreground 'unspecified ;"DarkOrange"
                      :weight 'bold
                      :inherit '(variable-pitch)))

(elpaca minions
  (minions-mode)
  (add-to-list 'minions-prominent-modes 'view-mode))

(elpaca embark
  (keymap-global-set "C-." 'embark-act)
  (keymap-global-set "C-," 'embark-dwim)
  (keymap-global-set "C-h B" 'embark-bindings)
  (setq prefix-help-command 'embark-prefix-help-command))

(elpaca lsp-mode
  (setq lsp-enable-snippet nil))
(elpaca lsp-ui
  (defun my/greedy-peek-expand (ref-alist)
    (mapcar #'car ref-alist))
  (setq lsp-ui-peek-expand-function 'my/greedy-peek-expand)
  (setq lsp-ui-peek-enable t)
  (setq lsp-ui-peek-always-show t)
  (setq lsp-ui-peek-show-directory nil)
  (defun my/lsp-maps ()
    (define-key lsp-ui-mode-map [remap xref-find-definitions] 'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] 'lsp-ui-peek-find-references))
  (add-hook 'lsp-configure-hook 'my/lsp-maps)
  (setq lsp-ui-sideline-show-code-actions t)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-position 'point)
  (setq lsp-ui-doc-include-signature t)
  (setq lsp-ui-doc-use-webkit t)
  )

(elpaca consult
  (defun current-lsp-consult-symbols ()
    (interactive)
    (cond ((bound-and-true-p eglot-mode)
           (consult-eglot-symbols))
          ((and (bound-and-true-p lsp-mode)
                (bound-and-true-p consult-lsp-symbols))
           (consult-lsp-symbols))
          (t (consult-line-multi t ""))))
  (keymap-global-set "C-M-x" 'consult-mode-command)
  (keymap-global-set "C-x b" 'consult-buffer)
  (keymap-global-set "C-M-:" 'consult-complex-command)
  (keymap-global-set "C-x r b" 'consult-bookmark)
  (keymap-global-set "C-x p b" 'consult-project-buffer)
  (keymap-global-set "M-y" 'consult-yank-pop)
  (keymap-global-set "M-g e" 'consult-compile-error)
  (keymap-global-set "M-g f" 'consult-flymake)
  (keymap-global-set "M-g g" 'consult-goto-line)
  (keymap-global-set "M-g M-g" 'consult-goto-line)
  (keymap-global-set "M-g o" 'consult-outline)
  (keymap-global-set "M-g M" 'consult-global-mark)
  (keymap-global-set "M-g m" 'consult-mark)
  (keymap-global-set "M-g i" 'consult-imenu)
  (keymap-global-set "M-g I" 'consult-imenu-multi)
  (keymap-global-set "M-s d" 'consult-fd)
  (keymap-global-set "M-s g" 'consult-grep)
  (keymap-global-set "M-s G" 'consult-git-grep)
  (keymap-global-set "M-s r" 'consult-ripgrep)
  (keymap-global-set "M-s l" 'consult-line)
  (keymap-global-set "M-s L" 'consult-line-multi)
  (keymap-global-set "M-s k" 'consult-keep-lines)
  (keymap-global-set "M-s f" 'consult-focus-lines)
  (keymap-global-set "M-s h" 'consult-isearch-history)
  (keymap-global-set "M-s s" 'current-lsp-consult-symbols)
  (keymap-global-set "M-s M-s" 'current-lsp-consult-symbols)
  (keymap-set isearch-mode-map "M-h" 'consult-isearch-history)
  (keymap-set isearch-mode-map "M-s h" 'consuilt-isearch-history)
  (keymap-set isearch-mode-map "M-s l" 'consult-line)
  (keymap-set isearch-mode-map "M-s L" 'consult-line-multi)
  (keymap-set minibuffer-local-map "M-s" 'consult-history)
  (keymap-set minibuffer-local-map "M-r" 'consult-history)
  (setq consult-narrow-key "C--")
  (setq register-preview-delay 0.25
        register-preview-function #'consult-register-format)
  (add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode)
  (advice-add 'register-preview :override 'consult-register-window)
  (setq xref-show-xrefs-function 'consult-xref
        xref-show-definitions-function 'consult-xref)
  (require 'consult)
  (consult-customize consult-theme :preview-key '(:debounce 0.2 any)
                     consult-ripgrep consult-git-grep consult-grep
                     consult-bookmark consult-recent-file consult-xref
                     consult--source-file-register consult--source-recent-file
                     consult--source-bookmark consult--source-project-recent-file
                     :preview-key '(:debounce 0.4 any)))

(elpaca vertico
  (setq vertico-cycle t
        vertico-scroll-margin 1
        vertico-resize t)
  (vertico-mode)
  (vertico-reverse-mode)
  (vertico-mouse-mode)
  (keymap-set vertico-map "<tab>" 'minibuffer-complete)
  (keymap-set vertico-map "M-P" 'previous-line-x8)
  (keymap-set vertico-map "M-N" 'next-line-x8)
  (keymap-set vertico-map "<prior>" 'vertico-scroll-up)
  (keymap-set vertico-map "<next>" 'vertico-scroll-down)
  (defun my/vertico-inverse (args) (list (- (car args))))
  (advice-add 'vertico-mouse--scroll-up :filter-args 'my/vertico-inverse)
  (defun my/crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add 'completing-read-multiple :filter-args 'my/crm-indicator))


(elpaca corfu
  (setq corfu-cycle t
        corfu-popupinfo-delay '(0.25 . 0.1)
        corfu-popupinfo-hide nil
        corfu-preview-current nil
        corfu-on-exact-match nil
        corfu-quit-no-match 'separator
        corfu-preselect 'valid
        corfu-quit-at-boundary 'separator)
  (global-corfu-mode)
  (corfu-popupinfo-mode)
  (keymap-unset corfu-map "<remap> <move-beginning-of-line>")
  (keymap-unset corfu-map "<remap> <move-end-of-line>")
  (keymap-set corfu-map "<prior>" 'corfu-scroll-down)
  (keymap-set corfu-map "<next>" 'corfu-scroll-up)
  (keymap-set corfu-map "<tab>" 'corfu-expand)
  (keymap-set corfu-map "RET" 'corfu-send)
  (corfu-history-mode)
  (require 'savehist)
  (add-to-list 'savehist-additional-variables 'corfu-history)
  )

(elpaca cape
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file))

(elpaca embark-consult
  (add-hook 'embark-collect-mode-hook 'consult-preview-at-point-mode))

(elpaca marginalia
  (marginalia-mode)
  (setcdr (assoc 'package marginalia-annotator-registry) '(builtin))
  (keymap-set minibuffer-local-map "M-M" 'marginalia-cycle))

(elpaca orderless
  (setq orderless-component-separator 'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides '((file (styles partial-completion)))))

(elpaca consult-eglot)
(elpaca consult-eglot-embark (consult-eglot-embark-mode))
(elpaca consult-lsp
  (keymap-global-set "M-g d" 'consult-lsp-diagnostics))

;; Not sure I want to keep this
;; (elpaca yasnippet)
;; (elpaca yasnippet-snippets)
;; (elpaca consult-yasnippet
;;   (setq consult-yasnippet-use-thing-at-point t))

;; TODO: https://bard.github.io/emacs-run-command/quickstart
;; (elpaca run-command)


(elpaca ace-window
  (face-spec-set 'aw-leading-char-face
                 '((t (:height 360 :foreground "red"
                       :inherit (variable-pitch)))))
  (keymap-global-set "M-o" 'ace-window))

(elpaca markdown-mode
  (setq markdown-display-remote-images t)
  (setq markdown-enable-highlighting-syntax t)
  (setq markdown-enable-wiki-links t)
  (setq markdown-split-window-direction 'right)
  (defun my/find-markdown ()
    (setq markdown-command (or (executable-find "multimarkdown")
                               markdown-command)))
  (dolist (h '(markdown-mode-hook markdown-view-mode-hook
               gfm-mode-hook gfm-view-mode-hook))
    (add-hook h 'my/find-markdown)
    (add-hook h 'word-wrap-whitespace-mode)))

(elpaca form-feed-st
  (global-form-feed-st-mode)
  (set-face-attribute 'form-feed-st-line nil :foreground "grey75"))

(elpaca adaptive-wrap
  (setq adaptive-wrap-extra-indent 1)
  (add-hook 'prog-mode-hook 'adaptive-wrap-prefix-mode))

(elpaca treesit-auto
  (require 'treesit-auto)
  (setq treesit-auto-install 'prompt)
  ;; The package author doesn't seem to update often. Patch or remove broken recipes.
  (defconst broken-treesit-auto '(markdown latex))
  (setq treesit-auto-langs
        (seq-difference (mapcar #'treesit-auto-recipe-lang treesit-auto-recipe-list)
                        broken-treesit-auto))
  (defun my/find-treesit-auto-recipe (lang)
    (car (seq-filter (lambda (x) (eq (treesit-auto-recipe-lang x) lang))
                                       treesit-auto-recipe-list)))
  ;; Janet has the wrong name
  (when-let ((janet (my/find-treesit-auto-recipe 'janet)))
    (setf (treesit-auto-recipe-lang janet) 'janet-simple))
  (global-treesit-auto-mode))

(defun my/elisp-imenu ()
  (add-to-list 'imenu-generic-expression '(nil "^(elpaca \\([^ )]*\\)" 1)))
(add-hook 'emacs-lisp-mode-hook 'my/elisp-imenu)

(elpaca-wait)
